//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectoralApp.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ElectoralDBEntities : DbContext
    {
        public ElectoralDBEntities()
            : base("name=ElectoralDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblAssemblyConstituency> tblAssemblyConstituencies { get; set; }
        public virtual DbSet<tblCaste> tblCastes { get; set; }
        public virtual DbSet<tblCommunity> tblCommunities { get; set; }
        public virtual DbSet<tblCommunityCordinator> tblCommunityCordinators { get; set; }
        public virtual DbSet<tblCommunityType> tblCommunityTypes { get; set; }
        public virtual DbSet<tblDistrict> tblDistricts { get; set; }
        public virtual DbSet<tblElectoralRoll> tblElectoralRolls { get; set; }
        public virtual DbSet<tblParliamentConstituency> tblParliamentConstituencies { get; set; }
        public virtual DbSet<tblPoliticalParty> tblPoliticalParties { get; set; }
        public virtual DbSet<tblPollingStation> tblPollingStations { get; set; }
        public virtual DbSet<tblPollingStationSection> tblPollingStationSections { get; set; }
        public virtual DbSet<tblPrivilege> tblPrivileges { get; set; }
        public virtual DbSet<tblRequestAttribute> tblRequestAttributes { get; set; }
        public virtual DbSet<tblRequestType> tblRequestTypes { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblRolePrivilege> tblRolePrivileges { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblSubCaste> tblSubCastes { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblUserRole> tblUserRoles { get; set; }
        public virtual DbSet<tblUserVisit> tblUserVisits { get; set; }
        public virtual DbSet<tblVoter> tblVoters { get; set; }
        public virtual DbSet<tblVoter_Stage> tblVoter_Stage { get; set; }
        public virtual DbSet<tblVoterDemo> tblVoterDemoes { get; set; }
        public virtual DbSet<tblVoterExt> tblVoterExts { get; set; }
        public virtual DbSet<tblVoterRequest> tblVoterRequests { get; set; }
        public virtual DbSet<tblVoterRequestExt> tblVoterRequestExts { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<uspGetExactFNameSimilarLName_Result> uspGetExactFNameSimilarLName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetExactFNameSimilarLName_Result>("uspGetExactFNameSimilarLName");
        }
    
        public virtual ObjectResult<uspGetExactLNameSimilarFName_Result> uspGetExactLNameSimilarFName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetExactLNameSimilarFName_Result>("uspGetExactLNameSimilarFName");
        }
    
        public virtual ObjectResult<uspGetVoters_Result> uspGetVoters(string voterFirstName, string voterLastName, string rLFName, string voterEPICNo, string voterAddress, string voterMobile, Nullable<int> voterAge, Nullable<bool> useSoundex)
        {
            var voterFirstNameParameter = voterFirstName != null ?
                new ObjectParameter("VoterFirstName", voterFirstName) :
                new ObjectParameter("VoterFirstName", typeof(string));
    
            var voterLastNameParameter = voterLastName != null ?
                new ObjectParameter("VoterLastName", voterLastName) :
                new ObjectParameter("VoterLastName", typeof(string));
    
            var rLFNameParameter = rLFName != null ?
                new ObjectParameter("RLFName", rLFName) :
                new ObjectParameter("RLFName", typeof(string));
    
            var voterEPICNoParameter = voterEPICNo != null ?
                new ObjectParameter("VoterEPICNo", voterEPICNo) :
                new ObjectParameter("VoterEPICNo", typeof(string));
    
            var voterAddressParameter = voterAddress != null ?
                new ObjectParameter("VoterAddress", voterAddress) :
                new ObjectParameter("VoterAddress", typeof(string));
    
            var voterMobileParameter = voterMobile != null ?
                new ObjectParameter("VoterMobile", voterMobile) :
                new ObjectParameter("VoterMobile", typeof(string));
    
            var voterAgeParameter = voterAge.HasValue ?
                new ObjectParameter("VoterAge", voterAge) :
                new ObjectParameter("VoterAge", typeof(int));
    
            var useSoundexParameter = useSoundex.HasValue ?
                new ObjectParameter("UseSoundex", useSoundex) :
                new ObjectParameter("UseSoundex", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetVoters_Result>("uspGetVoters", voterFirstNameParameter, voterLastNameParameter, rLFNameParameter, voterEPICNoParameter, voterAddressParameter, voterMobileParameter, voterAgeParameter, useSoundexParameter);
        }
    
        public virtual ObjectResult<uspFindVoters_Result> uspFindVoters(string fName)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFindVoters_Result>("uspFindVoters", fNameParameter);
        }
    }
}
